{
    "filter": "フィルタ",
    "user_name": "ユーザー名",
    "password": "パスワード",
    "login": "ログインする",
    "overview_1": "高品質のWebサイトおよび単一ページアプリケーションの開発のための最小限のJavaScriptフレームワークおよびスタンドアロンコンポーネント。",
    "overview_2": "DataFormsJSは、一般的なビューおよびテンプレートエンジンで動作し、コントローラーロジックとモデルの状態を処理します。",
    "works_with": "で動作します",
    "and_more": "もっと！",
    "faster_dev_title": "より速い開発",
    "faster_dev_desc": "HTMLマークアップのみを使用してWebおよびGraphQLサービスからのデータを表示し、HTML属性を使用してアプリとサイトの機能を定義します。",
    "small_size_title": "小さいサイズ",
    "small_size_desc": "すべてのファイルはサイズが小さく、使用時にのみダウンロードされるため、パフォーマンスが向上し、サイトが小さくなります。",
    "easy_learn_title": "簡単に学べる",
    "easy_learn_desc": "DataFormsJSはHTML、CSS、JavaScript、テンプレートを中心に構築されており、最小限のJavaScriptとHTML APIを備えているため、すぐに開始できます。",
    "stability_title": "安定",
    "stability_desc": "長期使用向けに設計されています。 今日DataFormsJSを使用して開発されたサイトは、うまく機能し、数十年後に維持しやすくなります。",
    "flexibility_title": "柔軟性",
    "flexibility_desc": "他のコードとうまく機能し、APIは柔軟性とカスタム機能のために設計されています。 考えられるなら、DataFormsJSで構築できます。",
    "better_title": "より良いサイト",
    "better_desc": "DataFormsJSは、開発者とエンドユーザーの両方にとって素晴らしい体験になるように設計されており、より良いサイトを作成できます。",
    "view_sample": "サンプル全体を見る",
    "hello_world_example": "Hello Worldの例",
    "hello_world_hbs_desc": "DataFormsJSフレームワークは、シングルページアプリケーション（SPA）に最適です。 [data-route]を含む<template>および<script>要素は、さまざまなルート（ウェブページ）を定義するために使用され、URLからページのモデルに変数を渡すことができます。 この例では、テンプレートのレンダリングにハンドルバーを使用しています。",
    "hello_world_js_desc": "ハンドルバーやVueなどのテンプレートまたはビューエンジンを使用する必要はありません。 この例では、プラグイン[dataBind.js]を属性[data-bind]とともに使用して、URLから変数を表示します。",
    "hello_world_web_desc": "DataFormsJSには、最新のブラウザーで使用できるWeb Componentsが含まれており、古いブラウザーを使用しているユーザーにわかりやすい警告を提供します。 Web Componentsは、よく定義された標準であり、より少ないコードを使用しながらJavaScriptフレームワークと機能的に類似しているため、Web開発の将来としてしばしば説明されます。",
    "hello_world_react_desc": "DataFormsJSは、Babelの代替として使用できるWebベースのコンパイラ[jsxLoader.js]を提供します。 これにより、ビルドプロセスを必要とせずに、JSXをWebページ内で使用できます。 コンパイラーはダウンロードが小さく、実行が非常に高速です。",
    "json_data_example": "WebサービスからJSONデータを表示する",
    "json_data_hbs_desc": "DataFormsJSでは、マークアップ（HTMLおよびテンプレート）のみを使用してWebサービスからデータを表示できます。 [data-page]で指定されたさまざまなページオブジェクトを開発して、コントローラーロジックとモデルの状態を処理できます。 組み込みのページオブジェクト[jsonData]により、リクエストの状態[isLoading、isLoaded、hasError]に基づいてレンダリングするHTMLを制御できます。 この例では、属性[data-filter-selector]および[data-sort]がプラグインによって使用され、ユーザーがデータテーブルと対話できるようにします。 ページテンプレートは、一致するルートの[src]属性に基づいてダウンロードおよびキャッシュされます。",
    "json_data_vue_desc": "DataFormsJSは、アプリがJavaScriptを記述することなくVueを使用してデータを表示できるレンダリングエンジンとしてVueをサポートします。 各ルートには独自のVueインスタンスモデルが割り当てられ、組み込みページオブジェクトを使用する場合、[jsonData]は[isLoading、isLoaded、hasError]を使用して表示内容を制御できます。 この例では、[data-countries]と[data-regions]がルート上で定義され、Vueウォッチャーのインスタンスプロパティ[countries]と[regions]としても設定されます。 両方のプロパティは、ダウンロードされたWebサービスからのデータを表します。DataFormsJSは、Vue 2とVue 3の両方で動作します。",
    "json_data_react_desc": "DataFormsJSは、標準フレームワークに同様の機能を提供するために使用できるReactコンポーネント（JSXおよびJS）のセットも提供します。 Reactコンポーネントはサイズが小さく、Webサービスデータの表示、エラー処理、テーブルの並べ替え、フィルターコントロール、言語翻訳、データの書式設定などの機能が含まれています。",
    "json_data_graphql_desc": "DataFormsJSは、GraphQLの組み込みサポートを提供します。 この例では、Handlebarsを使用してGraphQLサービスからのデータを表示します。 GraphQLは、ページ上の全体のルートと個々の要素に割り当てることができ、ページに直接埋め込むか、使用時にダウンロードできます。",
    "json_data_web_desc": "Reactコンポーネントと同様に、DataFormsJSは、同様の機能を標準フレームワークに提供するために使用できるWeb Componentsのセットも提供します。 Web Componentsはサイズが小さく、Web Componentsを使用するアプリまたはサイトの出発点として適しています。 SPAの場合、<url-route>コンポーネントは、[src]属性に基づいて使用されるとテンプレートをダウンロードしてキャッシュします。 <json-data>コンポーネントは、[data-bind]およびその他のオプションを使用して、Webサービスから子要素にデータを渡します。",
    "create_site": "プレイグラウンドでインスタントサイトを作成してください！"
}