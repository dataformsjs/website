{
    "filter": "Filter",
    "user_name": "User Name",
    "password": "Password",
    "login": "Login",
    "overview_1": "A minimal JavaScript Framework and standalone React and Web Components for rapid development of high quality websites and single page applications.",
    "overview_2": "DataFormsJS works with popular view and template engines and handles controller logic and model state.",
    "works_with": "Works with",
    "and_more": "and more!",
    "faster_dev_title": "Faster Development",
    "faster_dev_desc": "Display data from Web and GraphQL Services using only HTML Markup and define App and Site features using HTML Attributes.",
    "small_size_title": "Small Size",
    "small_size_desc": "All files are small in size and downloaded only when used allowing for greater performance and a smaller site.",
    "easy_learn_title": "Easy to Learn",
    "easy_learn_desc": "DataFormsJS is built around HTML, CSS, JavaScript, Templating and has a minimal JavaScript and HTML API so you can get started immediately.",
    "stability_title": "Stability",
    "stability_desc": "Designed for long term use; a site developed with DataFormsJS today will work great and be easy to maintain decades from now.",
    "flexibility_title": "Flexibility",
    "flexibility_desc": "Works well with other code and the API is designed for flexibility and custom features. If you can think it, you can build it with DataFormsJS.",
    "better_title": "Better Sites",
    "better_desc": "DataFormsJS is designed to be a great experience for both developers and end users allowing you to create better sites.",
    "view_sample": "View Full Sample",
    "hello_world_example": "Hello World Example",
    "hello_world_hbs_desc": "The DataFormsJS Framework is ideally suited for Single Page Applications (SPA). <template> and <script> elements with [data-route] are used to define different routes (webpages) and variables can be passed from the URL to the page’s model. This example uses HandlebarsJS for template rendering.",
    "hello_world_js_desc": "Using a Template or View Engine such as HandlebarsJS or Vue is not required. In this example a plugin [dataBind.js] is used with the attribute [data-bind] to display the variable from the URL.",
    "hello_world_web_desc": "DataFormsJS includes Web Components which can be used on modern browsers and provides a friendly warning for users with older browsers. Web Components are often described as the future of web development because they are well defined standard and provide for functionally similar to JavaScript Frameworks while using less code.",
    "hello_world_react_desc": "DataFormsJS provides a web-based compiler [jsxLoader.js] that can be used as an alternative to Babel. It allows for JSX to be used inside of webpages without the need for a build process. The compiler is small to download and extremely fast to run.",
    "json_data_example": "Display JSON Data from a Web Service",
    "json_data_hbs_desc": "With DataFormsJS you can display data from web services using only markup (HTML and Templating). Different page objects specified in [data-page] can be developed to handle controller logic and model state. The built-in page object [jsonData] allows for control of what HTML to render based on the state of the request [isLoading, isLoaded, hasError]. In this example attributes [data-filter-selector] and [data-sort] are used by plugins to allow user interaction with the data table. Page templates are downloaded and cached based on the [src] attribute of matching routes.",
    "json_data_vue_desc": "DataFormsJS supports Vue as a rendering engine which allows for apps to display data using Vue without the need to write JavaScript. Each route is assigned its own Vue Instance Model and when using the built-in page object [jsonData] can use [isLoading, isLoaded, hasError] to control what is displayed. In this example [data-countries] and [data-regions] are defined on the routes which also sets them up as instance properties [countries] and [regions] with Vue watchers; both properties represent data from the downloaded web service. DataFormsJS works with both Vue 2 and Vue 3.",
    "json_data_react_desc": "DataFormsJS also provides a set of React Components that can be used to provide similar functionality to the standard framework. The React Components are small in size and include features such as displaying web service data, error handling, table sorting, filter controls, internationalization (i18n) / translations, data formatting, and more.",
    "json_data_graphql_desc": "DataFormsJS provides built-in support for GraphQL. This example uses HandlebarsJS to display data from a GraphQL service. GraphQL can be assigned to overall routes and individual elements on the page and queries can be embedded directly in the page or downloaded dynamically when first used.",
    "json_data_web_desc": "Similar to React Components DataFormsJS also provides a set of Web Components that can be used to provide similar functionality to the standard framework. The Web Components are small in size and provide a good starting point for an app or site that uses Web Components. For SPA’s the <url-route> component will download and cache templates when used based on the [src] attribute. The <json-data> component passes data from the web service to child elements using [data-bind] and other options.",
    "create_site": "Create an Instant Site on the Playground!"
}