<!-- EXAMPLE_CODE_START
TITLE: DataFormsJS Framework JavaScript Files
-->
<!--
    DataFormsJS Core Framework Files

    Framework JavaScript files work with templating and view engines
    (Handlebars, Vue, Nunjucks, and Underscore). In addition to
    the standard DataFormsJS Framework standalone classes for React and
    Web Components are available which provide similar functionality.

    [pages/jsonData.js] is optional but will be included in most apps.
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/DataFormsJS.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/jsonData.min.js"></script>

<!--
    To view the full source of any file replace [.min.js] with [.js].
    DataFormsJS is designed to be small in size and easy to use.
    All files are small enough that you can step through them with a debugger.
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/DataFormsJS.js"></script>

<!--
    JavaScript files can be loaded only when used by using [app.lazyLoad]
    along with [data-lazy-load] on the related route/controller.

    Additionally this allows for common polyfills such as [fetch, Promise, Object.assign]
    to be loaded first when using IE or older mobile devices.
-->
<script>
    app.lazyLoad = {
        entryForm: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/entryForm.min.js',
        filter: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/filter.min.js',
        sort: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/sort.min.js',
        // All lazy load scripts are downloaded asynchronously at the same time,
        // however when an array is used the related scripts will be downloaded
        // in the order specified.
        chosen: [
            'https://code.jquery.com/jquery-3.4.1.min.js',
            'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.css',
            'https://cdn.jsdelivr.net/npm/chosen-js@1.8.7/chosen.jquery.min.js',
        ],
        chosenPlugin: 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/chosen.js',
    };

    // A loading screen <template> can displayed while scripts are loading in-between
    // page views. Often on a desktop scripts download quickly and the user won’t notice,
    // however on a mobile device or slower connection there can be a small delay for large
    // scripts so using a loading screen is recommended. The main site for DataFormsJS
    // provides a good example of how it’s used.
    app.settings.lazyTemplateSelector = '#loading-screen';
</script>

<template
    data-route="/order/:orderId"
    data-page="entryForm"
    data-src="html/order-form.htm"
    data-lazy-load="entryForm, filter, sort, chosen, chosenPlugin">
</template>

<!--
    Handlebars Helpers and Vue Directives are available
    and can be used without the Framework.

    Vue Directives work without DataFormsJS for Vue 2
    but require DataFormsJS for Vue 3 due to Vue API changes.
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/handlebars-helpers.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/vue-directives.min.js"></script>

<!--
    Using relative URL’s is recommended if hosting files locally.
-->
<script src="js/DataFormsJS.js"></script>
<script>
    app.lazyLoad = {
        jsonData: 'js/pages/jsonData.js',
        exportToCsv: 'js/plugins/exportToCsv.js',
    };
</script>

<!--
    DataFormsJS is developed in a manner so that script order does not matter for
    most scripts as long as the core [DataFormsJS.js] is included first, however if a
    custom page object is based on another page then they need to be included in the
    correct order. For core files [entryForm.js] must be included after [jsonData.js].
-->
<script src="js/DataFormsJS.js"></script>
<script src="js/pages/jsonData.js"></script>
<script src="js/pages/entryForm.js"></script>

<!--
    CDN links for supported Template and View Engines
-->
<script src="https://cdn.jsdelivr.net/npm/handlebars@4.7.6/dist/handlebars.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/nunjucks@3.2.0/browser/nunjucks.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/underscore@1.9.1/underscore.min.js"></script>

<!-- Vue 2 -->
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>

<!-- Vue 3 -->
<!-- <script src="https://cdn.jsdelivr.net/npm/vue@3.2.30/dist/vue.global.prod.js"></script> -->
<!-- EXAMPLE_CODE_END -->

<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: DataFormsJS JSX Loader and React Components
-->
<!--
    DataFormsJS JSX Loader

    [jsxLoader.js] will quickly compile and convert JSX to JS for modern browsers,
    and for older browsers it will download and use Babel Standalone from a CDN.
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/jsxLoader.min.js"></script>

<!--
    DataFormsJS React Components

    The core [DataFormsJS.min.js] file includes DataFormsJS React Components
    [JsonData, ErrorBoundary, LazyLoad, InputFilter, SortableTable] and Classes
    [Cache, CssVars, Format]. All React Components are also compatible with Preact
    when using jsxLoader.

    Additional Components [ImageGallery, Markdown, LeafletMap] and Class [I18n]
    need to be included separately.
-->
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es6/DataFormsJS.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es5/DataFormsJS.min.js"></script>
<!--
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es6/I18n.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es6/ImageGallery.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es6/Markdown.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es6/LeafletMap.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es5/I18n.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es5/ImageGallery.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es5/Markdown.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es5/LeafletMap.min.js"></script>
-->

<!--
    Each React Component or Class for React has 4 versions:

    1) [react/es6/{Class}.js]
        Source file which includes "import React from 'react';" so it can be used
        with `webpack`, `create-react-app`, etc. However this will not load in a browser
        by default unless using Babel Standalone or jsxLoader with [type="text/babel"].
    2) [react/es6/{Class}.min.js]
        Minimized source file that works with modern browsers.
    3) [react/es5/{Class}.js]
        ES5 Version of the source file that works with all browsers.
    4) [react/es5/{Class}.min.js]
        Minimized ES5 Version of the source file that works with all browsers.

    The recommended method for including files is to use include both minimized
    files - one for modern browsers and one for legacy browsers (IE, older mobile devices, etc):
        <script type="module" src="dataformsjs/js/react/es6/JsonData.min.js"></script>
        <script nomodule src="dataformsjs/js/react/es5/JsonData.min.js"></script>
-->
<script type="text/babel" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es6/JsonData.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es6/JsonData.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es5/JsonData.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/es5/JsonData.min.js"></script>

<!--
    Standard Framework Plugins are supported with React when using an API from [jsPlugins.js]
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/react/jsPlugins.min.js"></script>

<!--
    Include React
-->
<script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"></script>
<script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"></script>

<!--
    DataFormsJS React Components can be used with React Router for SPA's
-->
<script src="https://unpkg.com/react-router@5.2.0/umd/react-router.min.js"></script>
<script src="https://unpkg.com/react-router-dom@5.2.0/umd/react-router-dom.min.js"></script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: DataFormsJS React Components with [Create React App] or Node
LANG: JSX
-->
<script type="text/babel">
{/*
    Create your app using the standard [create-react-app] and run [npm install dataformsjs]:

    npx create-react-app my-app
    cd my-app
    npm install dataformsjs
    npm start
*/}

// Import Components from root DataFormsJS file
import { ErrorBoundary, JsonData } from 'dataformsjs/js/react/es6/DataFormsJS';

// Import the default DataFormsJS Namespace
// You can then use the following for JSX:
//     <DataFormsJS.JsonData>
import DataFormsJS from 'dataformsjs/js/react/es6/DataFormsJS';

// Import Individual Components:
import JsonData from 'dataformsjs/js/react/es6/JsonData';
import ErrorBoundary from 'dataformsjs/js/react/es6/ErrorBoundary';
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: DataFormsJS Web Components
-->
<!--
    Web Components
    Including [type="module"] is required for Web Components because they
    use import statements for shared utility functions.

    All DataFormsJS Web Components have can be polyfilled for old browsers by
    including the [nomodule] polyfill script:
        <script nomodule src="dataformsjs/js/web-components/polyfill.min.js"></script>

    [polyfill.js] does not provide polyfills for [window.customElements] or any
    Web Component APIs; rather it downloads and uses the DataFormsJS Framework to
    replicate the needed functionality for DataFormsJS Web Components to work.
-->
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/url-router.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/json-data.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/data-list.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/data-table.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/data-view.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/input-filter.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/sortable-table.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/image-gallery.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/markdown-content.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/leaflet-map.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/html-import-service.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/i18n-service.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/keydown-action-service.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/prism-service.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/show-errors-service.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/polyfill.min.js"></script>

<!--
    [nomodule] Scripts are available to provide users with a friendly message for
    the site will not work if they are using IE or older mobile devices and browsers.

    In general only [old-browser-warning.min.js] needs to be included because users have
    the ability to close the message alert if it occurs on older modern browsers that run
    both [type="module"] and [nomodule] scripts.

    [safari-nomodule.min.js] targets specific versions of Safari (10.#) that run both
    [type="module"] and [nomodule] scripts. In general this file is no longer needed
    for most sites.
-->
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/safari-nomodule.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/old-browser-warning.min.js"></script>

<!--
    Standard Framework Plugins are supported with Web Components when using an API from [jsPlugins.js]
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/jsPlugins.min.js"></script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: All Framework Files
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/DataFormsJS.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/data-list.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/data-table.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/data-view.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/json-data.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/controls/markdown-content.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/events.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/format.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/handlebars-helpers.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/jsTemplate.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/validation.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/extensions/vue-directives.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/jsonData.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/entryForm.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/pages/classes/JsonData.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/chosen.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/clickToHighlight.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/clickUrlAction.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/codemirror.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/dataBind.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/exportToCsv.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/filter.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/highlighter.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/i18n.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/imageGallery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/keydownAction.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/leaflet.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/listEditor.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/modalAlert.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/navLinks.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/onePageSite.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/pickadate.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/prism.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/sort.min.js"></script>
<!-- EXAMPLE_CODE_END -->



<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Framework Routes
-->
<!--
    Routes represent a webpage in a SPA and can be defined by other plain <template>
    elements or by using rendering engines with <script type="text/x-template">.

    [data-engine] is used to specify the template type: ['handlebars', 'vue', 'underscore', or 'nunjucks'].
    [data-route] defines the local route path after the URL hash '#' or the root host '/'
    when using the HTML5 History API for routing.
-->
<template data-route="/path">...</template>
<script type="text/x-template" data-engine="handlebars" data-route="/path">...</script>

<!--
    When using [src], template content will be downloaded dynamically the
    first time the route is used.
-->
<template data-route="/path" src="https://example.com/"></template>
<script type="text/x-template" data-engine="handlebars" data-route="/path" src="https://example.com/"></script>

<!--
    Parameters for route path start with [:] and can be accessed by JavaScript.
    When using the standard [jsonData] page type the parameters are passed to the URL.
    In this example the local hash route "#/order/view/123" would end up calling
    "https://example.com/data/order/view/123", and the URL parameters can be accessed
    by controller, model, or plugin functions.
-->
<script
    type="text/x-template"
    data-engine="handlebars"
    data-route="/:recordType:/:action/:recordId"
    data-page="jsonData"
    data-url="https://example.com/data/:recordType:/:action/:recordId">
</script>
<script>
    // Example for URL: '#/order/view/123'
    app.activeParameterList = {
        recordType: 'order',
        action: 'view',
        recordId: '123',
    };

    app.activeParameters = [
        'order',
        'view',
        '123'
    ];
</script>

<!--
    Custom HTML 'data-*' attributes are passed to the controller through a
    settings object. Values will be either bool or strings. Example:
        'data-url' becomes 'settings.url'
        'data-save-url' becomes 'settings.saveUrl'

    The [jsonData] page object includes the setting [data-load-only-once]
    which if set to "true" caches the data so it is loaded only once and
    kept in memory.
-->
<script
    type="text/x-template"
    data-engine="handlebars"
    data-route="/:recordType:/:action/:recordId"
    data-page="jsonData"
    data-url="https://example.com/view"
    data-save-url="https://example.com/save"
    data-load-only-once>
</script>
<script>
    // View settings from JavaScript for the active controller:
    console.log(app.activeController.settings);
</script>

<!--
    The default route is defined by [data-route="/"] however if a different
    route should be the default then use the attribute [data-default-route].
-->
<script
    type="text/x-template"
    data-engine="handlebars"
    data-default-route
    data-route="/:lang/">
</script>

<!--
    To link to a route when using the default hash URL’s
    simply use a standard <a> element:
-->
<a href="#/info">Info</a>

<!--
    Using HTML5 History API

    By default DataFormsJS uses URL hash routing for routes (example "#/page").
    This works well for static sites that use web services. For example a
    single page with related content can be hosted on AWS S3.

    The HTML5 History API can be used to define routes without a hash
    (“/page” instead of “/page”). Typically when using this method server code
    will be used so a 404 page can be returned to the user for missing routes.
    If server code is not used then DataFormsJS will redirect to the default
    route for an unknown URL. The main DataFormsJS site uses the HTML5 History
    API and can be referenced as an example app.

    To use specifiy the [data-routing-mode="history"] in the root <html> element.
-->
<html data-routing-mode="history">...</html>

<!--
    Then for navigation links on the site use start the href with “/”:
-->
<a href="/info">Info</a>

<!--
    Instead of using a hash “#” URL:
-->
<a href="#/info">Info</a>

<!--
    By default when using the HTML5 History API for routing all links starting with
    href="/..." will be updated to use JavaScript Routing. If you have relative pages
    for the site that need to point to a separate page include the [data-no-pushstate]
    attribute on the related links so that the links will not be processed for
    JavaScript routing.
-->
<a href="/other-app/page.htm" data-no-pushstate>App</a>
<!-- EXAMPLE_CODE_END -->



<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Framework HTML Controls
LANG: Handlebars
-->
<!--
    The DataFormsJS Framework allows for HTML templates to be defined once and
    used by multiple pages or by multiple elements in a single page.

    Simply define a <template> or <script> element with either an [id];
    if [src] is specified then the control content will be downloaded
    and cached only when it is used.
-->
<template id="loading-screen">
    <div>Loading...</div>
</template>
<script id="error-screen" type="text/x-template" data-engine="handlebars" src="https://example.com/error-screen.htm"></script>

<!--
    Then to render the HTML control under an element use the [data-template-id]
    attribute with the ID of the control.
-->
<script
    type="text/x-template"
    data-engine="handlebars"
    data-route="/page1"
    data-page="jsonData"
    data-url="https://example.com/data/page1">
    {{#if isLoading}}<div data-template-id="loading-screen"></div>{{/if}}
    {{#if hasError}}<div data-template-id="error-screen"></div>{{/if}}
    ...
</script>

<!--
    [data-template-url] can also be used to specify the URL of the control template to download.
-->
<script
    type="text/x-template"
    data-engine="handlebars"
    data-route="/page2">
    {{#if isLoading}}<div data-template-url="html/loading-screen.htm"></div>{{/if}}
    {{#if hasError}}<div data-template-url="html/error-screen.htm"></div>{{/if}}
    ...
</script>

<!--
    Controls can be nested and can mix [data-template-url] and [data-template-id]
-->
<script id="page-title" type="text/x-template" data-engine="handlebars">
    <img src="img/logo.svg" />
    <div data-template-url="html/child-control-1"></div>
</script>

<template id="parent-control">
    <div data-template-id="page-title.htm"></div>
    <div data-template-url="html/child-control-2.htm"></div>
</template>

<script>
    // The core [DataFormsJS/app] object provides a JavaScript API to refresh
    // controls. This is commonly used for dynamic pages that need to refresh
    // their content after the model is updated when using templating
    // [Handlebars, Nunjucks or Underscore]. These methods should not be called
    // for most sites when using Vue for rendering.

    // Refresh all HTML Controls on the page. All elements with either
    // [data-template-id] or [data-template-url].
    app.refreshAllHtmlControls(callback, model);

    // Refresh a specific control on the page.
    app.refreshHtmlControl(element, callback, model);

    // Both the [callback] function and the [model] object are optional.
    // When [model] is not passed then [app.activeModel] is used.

    // When [app.refreshAllHtmlControls] is called then all plugins
    // will be called and refreshed from [app.refreshPlugins()].
    app.refreshAllHtmlControls(function() {
        console.log('Refreshed all HTML Controls and Plugins');
    });

    // When [app.refreshHtmlControl] is called, plugins under the specific
    // control will be called using [app.refreshPlugins(control)].
    app.refreshHtmlControl(control, function() {
        console.log('Refreshed HTML Control:');
        console.log(control);
    });

    // If you are developing a script that may be used by multiple
    // templating engines including Vue you can add a check to only
    // call these functions if the view engine is not Vue.
    if (app.activeController.viewEngine !== 'Vue') {
        app.refreshAllHtmlControls();
    }
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Framework using Handlebars - Show Data from a JSON Web Service
LANG: Handlebars
-->
<script
    type="text/x-template"
    data-engine="handlebars"
    data-route="/data"
    data-page="jsonData"
    data-url="https://www.dataformsjs.com/data/geonames/countries">

    {{#if isLoading}}<div>Loading...</div>{{/if}}
    {{#if hasError}}<div>{{errorMessage}}</div>{{/if}}
    {{#if isLoaded}}
        <ul>
            {{#each countries}}
                <li>{{country}}</li>
            {{/each}}
        </ul>
    {{/if}}
</script>
<!--
    Optionally the attribute [data-prop] can be used so that all downloaded data
    is assigned to a specific model property. For example [data-prop="records"]
    will assign all downloaded data to [app.activeModel.records].

    For web services that return an un-named array of data using
    [data-prop] is needed in order to create a model prop.
-->
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Framework using Vue - Show Data from a JSON Web Service
-->
<script
    type="text/x-template"
    data-route="/data"
    data-page="jsonData"
    data-url="https://www.dataformsjs.com/data/geonames/countries">

    <h3 v-if="isLoading" class="loading">Loading...</h3>
    <h3 v-if="hasError" class="error">{{ errorMessage }}</h3>
    <div v-if="isLoaded">
        <ul>
            <li v-for="country in countries">{{ country.country }}</li>
        </ul>
    </div>
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Framework with GraphQL - Show Data from a JSON Web Service
-->
<!--
    Define the GraphQL Service using [data-graphql-url]
    on the root <html> element.
-->
<html lang="en" data-graphql-url="https://www.dataformsjs.com/graphql">

<!--
    GraphQL can be embedded directly in the page and accessed by [id].
-->
<script type="application/graphql" id="graphql-countries">
    {
        countries {
            iso
            country
            area_km
            population
            continent
        }
    }
</script>

<!--
    [jsonData] pages use [data-graphql-id] to specify which GraphQL query to use.
-->
<script
    type="text/x-template"
    data-route="/data"
    data-page="jsonData"
    data-graphql-id="graphql-countries">

    <h3 v-if="isLoading" class="loading">Loading...</h3>
    <h3 v-if="hasError" class="error">{{ errorMessage }}</h3>
    <div v-if="isLoaded">
        <ul>
            <li v-for="country in countries">{{ country.country }}</li>
        </ul>
    </div>
</script>

<!--
    Additionally [data-graphql-src] can be used to download the query dynamically.
-->
<script
    type="text/x-template"
    data-engine="handlebars"
    data-route="/regions/:country"
    data-page="jsonData"
    data-graphql-src="graphql/regions.graphql"
    src="html/country-list.htm">
</script>
<!-- EXAMPLE_CODE_END -->
</html>


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Web Components - Show Data from a JSON Web Service
-->
<!-- Define a root element for the view -->
<div id="view"></div>

<!--
    Link URL router to the view by query selector
-->
<url-router view-selector="#view">
    <!--
        Routes contain the HTML <template>
    -->
    <url-route path="/">
        <template>
            <!--
                Data is passed from <json-data> to child elements using [data-bind]

                When the optional [load-only-once] attribute is used as shown below,
                data will be cached in memory and re-used if the same URL is accessed
                while the page is open.
            -->
            <json-data
                url="https://www.dataformsjs.com/data/geonames/countries"
                load-only-once>
                <is-loading>
                    <span class="loading">Loading...</span>
                </is-loading>
                <has-error>
                    <span class="error" data-bind="errorMessage"></span>
                </has-error>
                <is-loaded>
                    <!--
                        Built-in Web Components such as <data-table> can be used or
                        use JavaScript to define custom Web Components for your app.
                    -->
                    <data-table
                        data-bind="countries"
                        col-link-template="#/regions/:iso"
                        table-attr="is=sortable-table">
                    </data-table>
                </is-loaded>
            </json-data>
        </template>
    </url-route>

    <!--
        Route HTML <template> source will be downloaded dynamically when using [src].
    -->
    <url-route path="/regions/:country" src="html/regions-web.htm"></url-route>
</url-router>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Framework Plugins - Filtering and Sorting
-->
<!--
    The Framework provides many plugins; two commonly used plugins that allow
    for end users to work with data on a page are [filter.js] and [sort.js].
-->
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/filter.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/plugins/sort.min.js"></script>
<script
    type="text/x-template"
    data-engine="underscore"
    data-route="/data"
    data-page="jsonData"
    data-url="https://www.dataformsjs.com/data/geonames/countries">

    <% if (isLoading) { %><div data-template-id="loading-screen"></div><% } %>
    <% if (hasError) { %><div data-template-id="error-screen"></div><% } %>
    <% if (isLoaded) { %>
        <h1>Countries</h1>

        <!--
            [filter.js] allows users to filter elements on the page based
            on the [data-filter-selector] property. The plugin has many options
            and can work with <input> controls for text and other elements when
            the user clicks on them.
        -->
        <input
            data-filter-selector="table"
            data-filter-results-text-selector="h1"
            data-filter-results-text-all="{totalCount} Countries"
            data-filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
            placeholder="Enter filter, example 'North America'">

        <div
            data-filter-selector="table"
            data-filter-column="Continent"
            data-filter-operator="==="
            data-filter-value="EU">
            Filter for 'EU'
        </div>

        <!--
            <sort.js> allows users to click on columns in a standard HTML <table>
            and sort rows based on data of the clicked column. The data type
            (numbers, dates, etc) is determined based on the data and
            sorted based on data type.
        -->
        <table
            data-sort
            data-sort-class-odd="row-odd"
            data-sort-class-even="row-even">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Name</th>
                    <th>Size (KM)</th>
                    <th>Population</th>
                    <th>Continent</th>
                </tr>
            </thead>
            <tbody>
                <% countries.map(function(country) { %>
                <tr>
                    <td><%- country.iso %></td>
                    <td><%- country.country %></td>
                    <td><%- country.area_km %></td>
                    <td><%- country.population %></td>
                    <td><%- country.continent %></td>
                </tr>
                <% }) %>
            </tbody>
        </table>
    <% } %>
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: Web Components - Filtering and Sorting
-->
<!--
    Two Web Components provide similar functionality to the standard Framework [filter.js] and [sort.js].
-->
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/input-filter.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/sortable-table.min.js"></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/polyfill.min.js"></script>

<!--
    The [input-filter.js] component is inherited from the standard <input> element.
    Use it by defining the attribute [is="input-filter"] along with [filter-selector].
    [filter-selector] can be either a table or query selector of elements.
-->
<input is="input-filter" filter-selector="table">
<input is="input-filter" filter-selector="ul.item-list li">

<!--
    The [sortable-table.js] component is inherited from the standard <table> element.
    Use it by defining the attribute [is="sortable-table"].

    Alternating row style can be controlled from attributes [data-sort-class-odd]
    and [data-sort-class-even]. The [input-filter.js] component also uses the
    attributes when filtering a related table.
-->
<table is="sortable-table" data-sort-class-odd="row-odd" data-sort-class-even="row-even">
    ...
</table>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: React - Show Data from a JSON Web Service
LANG: JSX
-->
<script type="text/babel">
function ShowLoading() {
    return <h3 className="loading">Loading...</h3>;
}

function ShowError(props) {
    return <p className="error">{props.error}</p>;
}

function ShowData(props) {
    return (
        <React.Fragment>
            <ul>
                {props.data && props.data.countries && props.data.countries.map(country => {
                    return (
                        <li key={country.iso}>{country.country}</li>
                    )
                })}
            </ul>
        </React.Fragment>
    )
}

{/*
    <ErrorBoundary> is an optional component.

    <ErrorBoundary> can be used to help solve and display React Component Errors.

    <JsonData> is used to download data and render different
    components based on the web service fetch state. JSON data from
    the web service will be passed to the component through [props.data].

    By default <JsonData> calls the web service each time the component
    is created. When using the optional [loadOnlyOnce] prop, as shown
    below, data will be cached in memory and re-used if the same URL
    is accessed while the page is open.
*/}
class App extends React.Component {
    render() {
        return (
            <ErrorBoundary>
                <JsonData
                    url="https://www.dataformsjs.com/data/geonames/countries"
                    isLoading={<ShowLoading />}
                    hasError={<ShowError />}
                    isLoaded={<ShowData />}
                    loadOnlyOnce={true} />
            </ErrorBoundary>
        )
    }
}

ReactDOM.render(
    <App />,
    document.getElementById('root')
);
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: React - Using Custom Fetch Options and Request Headers
LANG: JSX
-->
<script type="text/babel">
{/*
    [fetchOptions] and [fetchHeaders] allow for the app to control the
    fetch options and custom send request headers for the component.

    The default [fetchOptions] are shown below.
*/}

<JsonData
    url="https://www.dataformsjs.com/data/geonames/countries"
    isLoading={<ShowLoading />}
    hasError={<ShowError />}
    isLoaded={<ShowCountries />}
    fetchOptions={{
        mode: 'cors',
        cache: 'no-store',
        credentials: 'same-origin',
    }}
    fetchHeaders={{
        Authorization: 'bearer 123abc',
    }} />
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: React - Filtering and Sorting Data
LANG: JSX
-->
<script type="text/babel">
function ShowCountries(props) {
    return (
        <React.Fragment>
            {/*
                <InputFilter> renders a standard HTML <input> that allows users
                to filter elements on the page based on the [filter-selector]
                property. Additional optional attributes can be used to show
                the filter result.
            */}
            <InputFilter
                filter-selector="table.data-table"
                filter-results-selector="h1"
                filter-results-text-all="{totalCount} Countries"
                filter-results-text-filtered="Showing {displayCount} of {totalCount} Countries"
                placeholder="Enter filter, example 'North America'" />

            {/*
                <SortableTable> renders a standard HTML <table> that allows
                users to click on columns and sort rows based on data of the
                clicked column. The data type (numbers, dates, etc) is
                determined based on the data and sorted based on data type.

                Both <InputFilter> and <SortableTable> have "side effects" for
                related elements because they change the sort and display order of
                each row, however, it does not cause issues with most apps and pages.
            */}
            <SortableTable
                className="data-table"
                data-sort-class-odd="row-odd"
                data-sort-class-even="row-even">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Size (KM)</th>
                        <th>Population</th>
                        <th>Continent</th>
                    </tr>
                </thead>
                <tbody>
                    {props.data && props.data.countries && props.data.countries.map(country => {
                        return (
                            <tr key={country.iso}>
                                <td>{country.iso}</td>
                                <td>{country.country}</td>
                                <td>{country.area_km}</td>
                                <td>{country.population}</td>
                                <td>{country.continent}</td>
                            </tr>
                        )
                    })}
                </tbody>
            </SortableTable>
        </React.Fragment>
    )
}
</script>
<!-- EXAMPLE_CODE_END -->



<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: JavaScript Template - Create a Framework Plugin Function
LANG: JavaScript
-->
<script>
(function () {
    'use strict';

    app.addPlugin('name', function(rootElement) {
        // [rootElement] is an optional parameter and used when HTML controls
        // are refreshed from [app.refreshHtmlControl()].
        rootElement = (rootElement === undefined ? document : rootElement);
        console.log('plugin function called');
    });
})();
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: JavaScript Template - Create a Framework Plugin Object
LANG: JavaScript
-->
<script>
(function () {
    'use strict';

    // Plugin Object
    // Tip: This file is intended as a starting point;
    // delete all functions and code that you do not use.
    var plugin = {
        // Event that runs only once per hash change and before the view is
        // rendered. This event would typically be used to download resources
        // needed by the page that are not part of the page's controller. Since
        // this blocks the view from updating, it should only be used with very
        // fast web services, for example downloading simple JSON files.
        onRouteLoad: function(next) {
            next();
        },

        // Event called before the current view is rendered
        onBeforeRender: function() { },

        // Event called after the HTML is rendered and before the page's
        // controller [onRendered()] function runs.
        onRendered: function(rootElement) {
            rootElement = (rootElement === undefined ? document : rootElement);
        },

        // Event called only once per hash change or page refresh
        // and occurs before the current page is unloaded. Use to clean
        // up any page specific resources such as [window.clearInterval()].
        onRouteUnload: function() { },
    };

    // Add Plugin to DataFormsJS
    app.addPlugin('name', plugin);
})();
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: JavaScript Template - Create a Framework Page Object
LANG: JavaScript
-->
<script>
(function () {
    'use strict';

    // Create a new page object.
    // Tip: This file is intended as a starting point,
    // delete all functions and code that you do not use.
    var page = {
        // ----------------------------------------------------------
        // Define a model for the page object. Each route
        // that is used will create a new model for it's page.
        // ----------------------------------------------------------
        model: {
            setupView: function() {
                console.log(this);
            },
        },

        // ----------------------------------------------------------
        // Controller Functions. At least 1 function must be defined
        // for the page and all controller functions can use [this]
        // to access the page's model.
        // ----------------------------------------------------------

        // Controller function that is called once before the route
        // will be loaded. This is useful for calling web services
        // before any rendering happens. For example, see usage on the
        // core [pages/jsonData.js] file.
        onRouteLoad: function() { },

        // Define the Controller [onBeforeRender()] function.
        // This gets called each time the view is redrawn before
        // the HTML is rendered.
        //
        // When using Vue this function will not be called so instead
        // use [onRouteLoad()] to handle early controller logic.
        onBeforeRender: function() { },

        // Define the Controller [onRendered()] function.
        // This gets called each time the view is redrawn.
        onRendered: function() {
            this.setupView();
        },

        // Define the Controller [onRouteUnload()] function.
        // This event gets called only once per hash change when
        // the current route is unloaded. Use to clean up any page
        // specific resources such as [window.clearInterval()].
        onRouteUnload: function() { },
    };

    // Add page to app
    app.addPage('pageName', page);
})();
</script>
<!-- EXAMPLE_CODE_END -->


<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: JavaScript Template - Create a Framework Page Object based on [jsonData]
LANG: JavaScript
-->
<script>
// When creating pages based on other pages script load order is important:
// Load this file first:
//     <script src="js/pages/jsonData.js">
// Then load your custom file:
//     <script src="js/customPage.js">
(function () {
    'use strict';

    // Create the Page Object by copying the jsonData Page
    var page = app.deepClone({}, app.pages.jsonData);

    // Add new properties and functions for the page to the Model
    Object.assign(page.model, {
        // Properties
        property1: 'Example Property',
        property2: null,
        property3: 123,

        // Function example
        logInfo: function() {
            // These two properties come from the jsonData model Object
            // and are assigned to this model through [app.deepClone()]
            console.log(this.url);
            console.log(this.submittedFetchUrl);
            // Example property from this class
            console.log(this.property1);
        },

        // Called once when the view is loaded with data
        setupView: function() {
            // Reference the current model object
            var model = this;

            // Add custom page logic here
            model.logInfo();
        }
    });

    // Define the Controller [onRendered()] function.
    // This gets called each time the view is redrawn.
    page.onRendered = function() {
        if (this.isLoaded) {
            this.setupView();
        }
    };

    // Add page to the app
    app.addPage('customPage', page);
})();
</script>
<!-- EXAMPLE_CODE_END -->



<!-- ********************************************************************** -->
<!-- EXAMPLE_CODE_START
TITLE: JavaScript Template - Create a custom JavaScript Web Component (Custom HTML Element)
LANG: JavaScript
-->
<script>
/**
 * This Template creates a Web Components (Custom HTML Element). It can be used
 * as a starting point when creating Web Components. Web Components are built
 * using standard JavaScript and work with Modern Browsers.
 *
 * Example:
 *     <hello-world></hello-world>
 *     <hello-world name="Mars" color="blue"></hello-world>
 */

/* Validates with both [jshint] and [eslint] */
/* jshint esversion:8 */
/* eslint-env browser, es6 */

/**
 * Import a Tagged Template Literal function to safely escape values for HTML.
 *
 * The function can be imported directly from CDN when using modern browsers,
 * however to use zero dependencies for this template the import is commented
 * out and the needed functions are included here.
 */

// import { render } from 'https://cdn.jsdelivr.net/npm/dataformsjs@5/js/web-components/utils.min.js';

function escapeHtml(text) {
    if (text === undefined || text === null || typeof text === 'number') {
        return text;
    }
    return String(text)
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

function render(strings, ...values) {
    const html = [strings[0]];
    for (let n = 0, m = values.length; n < m; n++) {
        html.push(escapeHtml(values[n]));
        html.push(strings[n+1]);
    }
    return html.join('');
}

/**
 * Shadow DOM for Custom Elements
 */
const shadowTmpl = document.createElement('template');
shadowTmpl.innerHTML = `
    <style>
        :host { display: block; }
        :host([hidden]) { display: none; }
    </style>
    <slot></slot>
`;

/**
 * Define class for the <hello-world> element
 */
class HelloWorld extends HTMLElement {
    constructor() {
        super();
        const shadowRoot = this.attachShadow({mode: 'open'});
        shadowRoot.appendChild(shadowTmpl.content.cloneNode(true));
        this.state = {
            name: null,
            color: 'red',
        };
    }

    connectedCallback() {
        this.render();
    }

    // [observedAttributes] and [attributeChangedCallback] are used
    // to handle HTML attribute changes.
    static get observedAttributes() {
        return ['name', 'color'];
    }

    attributeChangedCallback(attrName, oldValue, newValue) {
        switch (attrName) {
            case 'color':
            case 'name':
                this.state[attrName] = newValue;
                this.render();
                break;
        }
    }

    // Define [name] and [color] properties for JavaScript
    // Example usage:
    //   document.querySelector('hello-world').name = 'John Doe';
    //   document.querySelector('hello-world').color = '#ff0';
    get name() {
        return this.state.name;
    }

    set name(newValue) {
        this.state.name = newValue;
        this.render();
    }

    get color() {
        return this.state.color;
    }

    set color(newValue) {
        this.state.color = newValue;
        this.render();
    }

    // Update the element contents
    render() {
        const name = (this.state.name ? this.state.name : 'World');
        const html = render`
			<div style="color:${this.state.color};">
				Hello ${name}!
			<div>`;
        this.innerHTML = html;
    }
}

/**
 * Add <hello-world> element to the page
 */
window.customElements.define('hello-world', HelloWorld);
</script>
<!-- EXAMPLE_CODE_END -->


<!-- NOTE - Use this as a template for new routes, spaces need to be added between '<!-- EXAMPLE_', etc -->
<!-- ********************************************************************** -->
<!--EXAMPLE_CODE_START
TITLE: New Route Template, Fix Spaces to work
-->
<!--EXAMPLE_CODE_END -->
